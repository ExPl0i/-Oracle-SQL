--Создание вьюхи TOP-10 книг по кол-ву выдачи
WITH COUNT_OF_ISSUE AS --Запрос на поиск количества выдачи
    (SELECT PM.ID_PRINTED_MATERIAL, COUNT(*) "COUNT OF ISSUE",
            DENSE_RANK () OVER(ORDER BY COUNT(*) DESC) DRNK
            FROM ISSUE_RETURN_JOURNAL IRJ
            LEFT JOIN PRINTED_MATERIAL PM
            ON IRJ.ID_PRINTED_MATERIAL = PM.ID_PRINTED_MATERIAL
            GROUP BY PM.ID_PRINTED_MATERIAL
            ORDER BY DRNK)

CREATE VIEW RANK_BOOKS
AS    SELECT DISTINCT PM.NAME, LISTAGG(DISTINCT A.AUTOR_NAME, ', ') WITHIN GROUP (ORDER BY A.AUTOR_NAME) AUTOR_NAMES, RNK.DRNK RANK
    FROM PRINTED_MATERIAL PM
    LEFT JOIN PM_COMPOSITION PMC
    ON PMC.ID_PRINTED_MATERIAL = PM.ID_PRINTED_MATERIAL
    LEFT JOIN COMPOSITION C
    ON PMC.ID_COMPOSITION = C.ID_COMPOSITION
    LEFT JOIN AUTOR_COMPOSITION AC
    ON AC.ID_COMPOSITION = C.ID_COMPOSITION
    LEFT JOIN AUTOR A
    ON AC.ID_AUTOR = A.ID_AUTOR
    LEFT JOIN COUNT_OF_ISSUE RNK
    ON PM.ID_PRINTED_MATERIAL = RNK.ID_PRINTED_MATERIAL
    WHERE RNK.DRNK IS NOT NULL
    AND RNK.DRNK <= (
            SELECT MAX(RNK1.DRNK)
            FROM PRINTED_MATERIAL PM
            LEFT JOIN COUNT_OF_ISSUE RNK1
                ON PM.ID_PRINTED_MATERIAL = RNK1.ID_PRINTED_MATERIAL
                WHERE ROWNUM <= 10
            )
    GROUP BY PM.NAME, RNK.DRNK      
    ORDER BY RNK.DRNK
;

--Создание вьюхи TOP-10 самых читающих пользователей
CREATE VIEW RANK_CLIENTS
AS    SELECT DISTINCT C.NAME CLIENT_NAME, RNK.DRNK RANK
    FROM CLIENTS C
    LEFT JOIN ISSUE_RETURN_JOURNAL IRJ
    ON C.ID_CLIENT = IRJ.ID_CLIENT
    LEFT JOIN COUNT_OF_ISSUE RNK
    ON C.ID_CLIENT = RNK.ID_CLIENT
    WHERE RNK.DRNK IS NOT NULL
    AND RNK.DRNK <= (
            SELECT MAX(RNK1.DRNK)
            FROM CLIENTS C
            LEFT JOIN COUNT_OF_ISSUE RNK1
                ON C.ID_CLIENT = RNK1.ID_CLIENT
                WHERE ROWNUM <= 10
            )
    GROUP BY C.NAME,  RNK.DRNK       
    ORDER BY RNK.DRNK
;

--Создание вьюхи для выбора книг, которые можно получить/почитать
WITH CLIENTS_IN_BLACK_LIST AS  --Запрос на выдачу клиетов в черном списке
    (SELECT C.NAME
                FROM CLIENTS C
                LEFT JOIN BLACK_LIST BL
                ON C.ID_CLIENT = BL.ID_CLIENT
                WHERE C.ID_CLIENT IN BL.ID_CLIENT
                AND BL.DEL_DATE IS NULL)

CREATE VIEW  ALL_BOOKS_CLIENTS  
AS    SELECT DISTINCT  C.NAME CLIENT_NAME, PM.ID_PRINTED_MATERIAL, PM.NAME PRINTED_MATERIAL_NAME, P.NAME PUBLISHER_NAME,
    CASE --Проверка на кол-во книг и black list
        WHEN S.COUNT > 1 AND C.NAME NOT IN CLIENTS_IN_BLACK_LIST
        THEN 'Можно прочитать в чиатльном зале или взять домой'
        WHEN S.COUNT = 1 AND C.NAME NOT IN CLIENTS_IN_BLACK_LIST
        THEN 'Можно прочитать только в чиатльном зале'
        ELSE 'Нельзя взять домой или прочитать в читальном зале'
    END   READER_CAN 
    FROM PRINTED_MATERIAL PM
    LEFT JOIN STORE S
    ON S.ID_PRINTED_MATERIAL = PM.ID_PRINTED_MATERIAL
    LEFT JOIN REG_NEW_PM RNPM
    ON PM.ID_PRINTED_MATERIAL = RNPM.ID_PRINTED_MATERIAL
    LEFT JOIN PUBLISHER P
    ON P.ID_PUBLISHER = RNPM.ID_PUBLISHER
    CROSS JOIN CLIENTS C
    ORDER BY ID_PRINTED_MATERIAL
;

--Написать запрос поиска всех книг заданного автора (вывести наименование книг, жанра, возрастное ограничение и ФИО автора)
SELECT PM.NAME, LISTAGG(G.NAME, ', ') WITHIN GROUP (ORDER BY G.NAME) GENRE_NAMES, L.LIMIT_SUBSTANTS, LISTAGG(DISTINCT A.AUTOR_NAME, ', ') WITHIN GROUP (ORDER BY A.AUTOR_NAME) AUTOR_NAMES
FROM PRINTED_MATERIAL PM
LEFT JOIN PM_COMPOSITION PMC
ON PMC.ID_PRINTED_MATERIAL = PM.ID_PRINTED_MATERIAL
LEFT JOIN COMPOSITION C
ON PMC.ID_COMPOSITION = C.ID_COMPOSITION
LEFT JOIN AUTOR_COMPOSITION AC
ON AC.ID_COMPOSITION = C.ID_COMPOSITION
LEFT JOIN AUTOR A
ON AC.ID_AUTOR = A.ID_AUTOR
LEFT JOIN GENRE_COMPOSITION GC
ON GC.ID_COMPOSITION = C.ID_COMPOSITION
LEFT JOIN GENRE G
ON GC.ID_GENRE = G.ID_GENRE
LEFT JOIN LIMITS L
ON PM.ID_LIMIT = L.ID_LIMIT
WHERE AUTOR_NAME = 'Михаил Булгаков'
GROUP BY PM.NAME, L.LIMIT_SUBSTANTS, A.AUTOR_NAME
;

--Написать запрос поиска всех книг изданных определенным издательством (позже/ранее заданной даты - вывести наименование книг, жанра, возрастное ограничение, ФИО автора и издательство)
--Ранее 8 августа 2012 года
SELECT PM.NAME, LISTAGG(G.NAME, ', ') WITHIN GROUP (ORDER BY G.NAME) GENRE_NAMES, L.LIMIT_SUBSTANTS, LISTAGG(DISTINCT A.AUTOR_NAME, ', ') WITHIN GROUP (ORDER BY A.AUTOR_NAME) AUTOR_NAMES, P.NAME PUBLISHER_NAME
FROM PRINTED_MATERIAL PM
LEFT JOIN REG_NEW_PM RNPM
ON PM.ID_PRINTED_MATERIAL = RNPM.ID_PRINTED_MATERIAL
LEFT JOIN PUBLISHER P
ON P.ID_PUBLISHER = RNPM.ID_PUBLISHER
LEFT JOIN PM_COMPOSITION PMC
ON PM.ID_PRINTED_MATERIAL = PMC.ID_PRINTED_MATERIAL
LEFT JOIN COMPOSITION C
ON C.ID_COMPOSITION = PMC.ID_COMPOSITION
LEFT JOIN AUTOR_COMPOSITION AC
ON AC.ID_COMPOSITION = C.ID_COMPOSITION
LEFT JOIN AUTOR A
ON AC.ID_AUTOR = A.ID_AUTOR
LEFT JOIN GENRE_COMPOSITION GC
ON GC.ID_COMPOSITION = C.ID_COMPOSITION
LEFT JOIN GENRE G
ON GC.ID_GENRE = G.ID_GENRE
LEFT JOIN LIMITS L
ON L.ID_LIMIT = PM.ID_LIMIT
WHERE P.NAME = 'АСТ'
AND PM.RELEASE_YEAR < EXTRACT(YEAR FROM DATE '2012-08-08')
GROUP BY PM.NAME, L.LIMIT_SUBSTANTS, P.NAME
;
--Позже 8 августа 2000 года
SELECT PM.NAME, LISTAGG(G.NAME, ', ') WITHIN GROUP (ORDER BY G.NAME) GENRE_NAMES, L.LIMIT_SUBSTANTS, LISTAGG(DISTINCT A.AUTOR_NAME, ', ') WITHIN GROUP (ORDER BY A.AUTOR_NAME) AUTOR_NAMES, P.NAME PUBLISHER_NAME
FROM PRINTED_MATERIAL PM
LEFT JOIN REG_NEW_PM RNPM
ON PM.ID_PRINTED_MATERIAL = RNPM.ID_PRINTED_MATERIAL
LEFT JOIN PUBLISHER P
ON P.ID_PUBLISHER = RNPM.ID_PUBLISHER
LEFT JOIN PM_COMPOSITION PMC
ON PM.ID_PRINTED_MATERIAL = PMC.ID_PRINTED_MATERIAL
LEFT JOIN COMPOSITION C
ON C.ID_COMPOSITION = PMC.ID_COMPOSITION
LEFT JOIN AUTOR_COMPOSITION AC
ON AC.ID_COMPOSITION = C.ID_COMPOSITION
LEFT JOIN AUTOR A
ON AC.ID_AUTOR = A.ID_AUTOR
LEFT JOIN GENRE_COMPOSITION GC
ON GC.ID_COMPOSITION = C.ID_COMPOSITION
LEFT JOIN GENRE G
ON GC.ID_GENRE = G.ID_GENRE
LEFT JOIN LIMITS L
ON L.ID_LIMIT = PM.ID_LIMIT
WHERE P.NAME = 'АСТ'
AND PM.RELEASE_YEAR > EXTRACT(YEAR FROM DATE '2000-08-08')
GROUP BY PM.NAME, L.LIMIT_SUBSTANTS, A.AUTOR_NAME, P.NAME
;

--Найти книги по заданным критериям (по жанру, по тегам, по автору, по ограничению)
SELECT PM.NAME, G.NAME, L.LIMIT_SUBSTANTS, A.AUTOR_NAME, T.TEG_NAME, P.NAME PUBLISHER
FROM PRINTED_MATERIAL PM
LEFT JOIN REG_NEW_PM RNPM
ON PM.ID_PRINTED_MATERIAL = RNPM.ID_PRINTED_MATERIAL
LEFT JOIN PUBLISHER P
ON P.ID_PUBLISHER = RNPM.ID_PUBLISHER
LEFT JOIN PM_COMPOSITION PMC
ON PMC.ID_PRINTED_MATERIAL = PM.ID_PRINTED_MATERIAL
LEFT JOIN COMPOSITION C
ON PMC.ID_COMPOSITION = C.ID_COMPOSITION
LEFT JOIN AUTOR_COMPOSITION AC
ON AC.ID_COMPOSITION = C.ID_COMPOSITION
LEFT JOIN AUTOR A
ON AC.ID_AUTOR = A.ID_AUTOR
LEFT JOIN GENRE_COMPOSITION GC
ON GC.ID_COMPOSITION = C.ID_COMPOSITION
LEFT JOIN GENRE G
ON GC.ID_GENRE = G.ID_GENRE
LEFT JOIN LIMITS L
ON L.ID_LIMIT = PM.ID_LIMIT
LEFT JOIN TEG_COMPOSITION TC
ON TC.ID_COMPOSITION = C.ID_COMPOSITION
LEFT JOIN TEGS T
ON T.ID_TEG = TC.ID_TEG
WHERE G.NAME = 'Драма'
AND A.AUTOR_NAME = 'Джордж Оруэлл'
AND L.LIMIT_VALUE = 18
AND T.TEG_NAME = 'Зарубежная литература'
;

--Найти список книг которые не могут быть выданы читателю домой
SELECT PM.NAME PRINTED_MATERIAL_NAME, P.NAME PUBLISHER_NAME
FROM PRINTED_MATERIAL PM
LEFT JOIN STORE S
ON S.ID_PRINTED_MATERIAL = PM.ID_PRINTED_MATERIAL
LEFT JOIN REG_NEW_PM RNPM
ON PM.ID_PRINTED_MATERIAL = RNPM.ID_PRINTED_MATERIAL
LEFT JOIN PUBLISHER P
ON P.ID_PUBLISHER = RNPM.ID_PUBLISHER
WHERE S.COUNT = 1
;

--Вывести список просроченных книг и их держателей со сроком просрочки
SELECT PM.NAME BOOK_NAME, C.NAME CLIENT_NAME, TRUNC((SYSDATE - (IRJ.ISSUE_DATE + 30)), 0) COUNT_OVERDUE
FROM CLIENTS C
LEFT JOIN ISSUE_RETURN_JOURNAL IRJ
ON C.ID_CLIENT = IRJ.ID_CLIENT
LEFT JOIN PRINTED_MATERIAL PM
ON PM.ID_PRINTED_MATERIAL = IRJ.ID_PRINTED_MATERIAL
WHERE IRJ.RETURN_DATE IS NULL
AND IRJ.ISSUE_DATE IS NOT NULL
;

--Вывести список неблагонадежных читателей
SELECT DISTINCT C.NAME CLIENT_NAME
FROM CLIENTS C
LEFT JOIN BLACK_LIST BL
ON C.ID_CLIENT = BL.ID_CLIENT
WHERE C.ID_CLIENT = BL.ID_CLIENT
AND BL.DEL_DATE IS NULL
;

--Найти книгу похожую на ранее прочитанную
SELECT C.NAME, LISTAGG(DISTINCT G.NAME, ', ') WITHIN GROUP (ORDER BY G.NAME) GENRE_NAMES, LISTAGG(DISTINCT T.TEG_NAME, ', ') WITHIN GROUP (ORDER BY T.TEG_NAME) TEG_NAMES, LISTAGG(DISTINCT A.AUTOR_NAME, ', ') WITHIN GROUP (ORDER BY A.AUTOR_NAME) AUTOR_NAMES
FROM COMPOSITION C
    LEFT JOIN GENRE_COMPOSITION GC
    ON GC.ID_COMPOSITION = C.ID_COMPOSITION
    LEFT JOIN GENRE G
    ON G.ID_GENRE = GC.ID_GENRE
    LEFT JOIN TEG_COMPOSITION TC
    ON TC.ID_COMPOSITION = C.ID_COMPOSITION
    LEFT JOIN TEGS T
    ON T.ID_TEG = TC.ID_TEG
    LEFT JOIN AUTOR_COMPOSITION AC
    ON AC.ID_COMPOSITION = C.ID_COMPOSITION
    LEFT JOIN AUTOR A
    ON AC.ID_AUTOR = A.ID_AUTOR
    WHERE GC.ID_GENRE IN (
            SELECT GC.ID_GENRE 
            FROM PM_COMPOSITION PMC
                JOIN (
                    SELECT ID_PRINTED_MATERIAL
                    FROM ISSUE_RETURN_JOURNAL
                    WHERE ID_CLIENT = 9
                    AND ISSUE_DATE = (SELECT MAX(ISSUE_DATE) FROM ISSUE_RETURN_JOURNAL WHERE ID_CLIENT = 9)
                ) FFF
                ON FFF.ID_PRINTED_MATERIAL = PMC.ID_PRINTED_MATERIAL
                LEFT JOIN COMPOSITION C
                ON C.ID_COMPOSITION = PMC.ID_COMPOSITION
                LEFT JOIN GENRE_COMPOSITION GC
                ON GC.ID_COMPOSITION = C.ID_COMPOSITION
        )
    OR TC.ID_TEG IN (
            SELECT T.ID_TEG
                FROM PM_COMPOSITION PMC
                    JOIN (
                        SELECT ID_PRINTED_MATERIAL
                        FROM ISSUE_RETURN_JOURNAL
                        WHERE ID_CLIENT = 9
                        AND ISSUE_DATE = (SELECT MAX(ISSUE_DATE) FROM ISSUE_RETURN_JOURNAL WHERE ID_CLIENT = 9)
                    ) FFF
                    ON FFF.ID_PRINTED_MATERIAL = PMC.ID_PRINTED_MATERIAL
                    LEFT JOIN COMPOSITION C
                    ON C.ID_COMPOSITION = PMC.ID_COMPOSITION
                    LEFT JOIN TEG_COMPOSITION TC
                        ON TC.ID_COMPOSITION = C.ID_COMPOSITION
                        LEFT JOIN TEGS T
                        ON TC.ID_TEG = T.ID_TEG
        )
    AND C.ID_COMPOSITION NOT IN(
            SELECT C.ID_COMPOSITION 
            FROM PM_COMPOSITION PMC
                JOIN (
                    SELECT ID_PRINTED_MATERIAL
                    FROM ISSUE_RETURN_JOURNAL
                    WHERE ID_CLIENT = 9
                ) FFF
                ON FFF.ID_PRINTED_MATERIAL = PMC.ID_PRINTED_MATERIAL
                LEFT JOIN COMPOSITION C
                ON C.ID_COMPOSITION = PMC.ID_COMPOSITION
                LEFT JOIN GENRE_COMPOSITION GC
                ON GC.ID_COMPOSITION = C.ID_COMPOSITION
    )
GROUP BY C.NAME 
;

--Запросы сделанные через вьюхи

--Найти ТОП 5 самых популярных книг (по кол-ву выдачи), через вьюху
SELECT *
FROM RANK_BOOKS RB
WHERE RB.RANK <= (
            SELECT MAX(RB.RANK)
            FROM RANK_BOOKS RB
            WHERE ROWNUM <= 5
            )    
; 

--Найти ТОП 5 самых читающих пользователей (за заданный период), через вьюху
SELECT DISTINCT *
FROM RANK_CLIENTS RC
WHERE RC.RANK <= (
            SELECT MAX(RNK1.DRNK)
            FROM CLIENTS C
            LEFT JOIN(
                        SELECT DISTINCT C.ID_CLIENT, COUNT(*) "COUNT OF ISSUE",
                        DENSE_RANK () OVER(ORDER BY COUNT(*) DESC) DRNK
                        FROM ISSUE_RETURN_JOURNAL IRJ
                        LEFT JOIN CLIENTS C
                        ON IRJ.ID_CLIENT = C.ID_CLIENT
                        WHERE IRJ.ISSUE_DATE > date '2022-01-01'
                        AND IRJ.ISSUE_DATE < date '2024-01-01'
                        GROUP BY C.ID_CLIENT
                        ORDER BY DRNK 
                ) RNK1
                ON C.ID_CLIENT = RNK1.ID_CLIENT
                WHERE ROWNUM <= 5)
ORDER BY RC.RANK                
; 

--Запрос который покажет может ли читатель почитать/получить желаемую книгу через вьюху
SELECT *
FROM ALL_BOOKS_CLIENTS
WHERE CLIENT_NAME = 'Петров Петр Петрович'
AND PRINTED_MATERIAL_NAME = 'Маленький принц'
